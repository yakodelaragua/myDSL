/*
 * generated by Xtext 2.25.0
 */
package diazdecerio.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import diazdecerio.mydsl.myDsl.JavaClass
import java.util.HashSet
import diazdecerio.mydsl.myDsl.SumStmt
import diazdecerio.mydsl.myDsl.Stmt
import diazdecerio.mydsl.myDsl.MulStmt
import diazdecerio.mydsl.myDsl.DivStmt
import diazdecerio.mydsl.myDsl.WhileStmt

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.toList().filter(JavaClass).head
		fsa.generateFile(resource.getFileName, model.generateASM)
	
	}
	
	def getFileName(Resource r) {
		r.URI.trimFileExtension.appendFileExtension('asm').lastSegment
	}
	
	def CharSequence generateASM(JavaClass m) '''
		PRG «m.packageName» GENERATED BY Diaz de Cerio;
		«FOR i: m.constructor.stmts»
			«m.format(i)»
		«ENDFOR»
		
		END.
	'''
	
	def format(JavaClass m, Stmt s){
		if (s instanceof SumStmt){
			return 'SUM ' + s.reg + ',' + s.value+';'
		} else if (s instanceof MulStmt){
			return 'MUL ' + s.reg + ',' + s.value+';'
		} else if (s instanceof DivStmt){
			return 'DIV ' + s.reg + ',' + s.value+';'
		} else if (s instanceof WhileStmt){
			val String ins = ''
			val int num = 0
			for (i: s.stmtsWhile){
				ins.concat(m.format(i).toString)
				//m.format(i)
			}
			return 'JEQ ' + s.cond.reg + ',' + s.cond.number + ';' + ins + 'JMP' + ';'
		}
	}
}
