/**
 * generated by Xtext 2.25.0
 */
package diazdecerio.mydsl.generator;

import com.google.common.collect.Iterables;
import diazdecerio.mydsl.myDsl.DivStmt;
import diazdecerio.mydsl.myDsl.JavaClass;
import diazdecerio.mydsl.myDsl.MulStmt;
import diazdecerio.mydsl.myDsl.Register;
import diazdecerio.mydsl.myDsl.Stmt;
import diazdecerio.mydsl.myDsl.SumStmt;
import diazdecerio.mydsl.myDsl.WhileStmt;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final JavaClass model = IterableExtensions.<JavaClass>head(Iterables.<JavaClass>filter(IteratorExtensions.<EObject>toList(resource.getAllContents()), JavaClass.class));
    fsa.generateFile(this.getFileName(resource), this.generateASM(model));
  }
  
  public String getFileName(final Resource r) {
    return r.getURI().trimFileExtension().appendFileExtension("asm").lastSegment();
  }
  
  public CharSequence generateASM(final JavaClass m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("PRG ");
    String _packageName = m.getPackageName();
    _builder.append(_packageName);
    _builder.append(" GENERATED BY Diaz de Cerio;");
    _builder.newLineIfNotEmpty();
    {
      EList<Stmt> _stmts = m.getConstructor().getStmts();
      for(final Stmt i : _stmts) {
        String _format = this.format(m, i);
        _builder.append(_format);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("END.");
    _builder.newLine();
    return _builder;
  }
  
  public String format(final JavaClass m, final Stmt s) {
    if ((s instanceof SumStmt)) {
      Register _reg = ((SumStmt)s).getReg();
      String _plus = ("SUM " + _reg);
      String _plus_1 = (_plus + ",");
      int _value = ((SumStmt)s).getValue();
      String _plus_2 = (_plus_1 + Integer.valueOf(_value));
      return (_plus_2 + ";");
    } else {
      if ((s instanceof MulStmt)) {
        Register _reg_1 = ((MulStmt)s).getReg();
        String _plus_3 = ("MUL " + _reg_1);
        String _plus_4 = (_plus_3 + ",");
        int _value_1 = ((MulStmt)s).getValue();
        String _plus_5 = (_plus_4 + Integer.valueOf(_value_1));
        return (_plus_5 + ";");
      } else {
        if ((s instanceof DivStmt)) {
          Register _reg_2 = ((DivStmt)s).getReg();
          String _plus_6 = ("DIV " + _reg_2);
          String _plus_7 = (_plus_6 + ",");
          int _value_2 = ((DivStmt)s).getValue();
          String _plus_8 = (_plus_7 + Integer.valueOf(_value_2));
          return (_plus_8 + ";");
        } else {
          if ((s instanceof WhileStmt)) {
            final String ins = "";
            final int num = 0;
            EList<Stmt> _stmtsWhile = ((WhileStmt)s).getStmtsWhile();
            for (final Stmt i : _stmtsWhile) {
              ins.concat(this.format(m, i).toString());
            }
            Register _reg_3 = ((WhileStmt)s).getCond().getReg();
            String _plus_9 = ("JEQ " + _reg_3);
            String _plus_10 = (_plus_9 + ",");
            int _number = ((WhileStmt)s).getCond().getNumber();
            String _plus_11 = (_plus_10 + Integer.valueOf(_number));
            String _plus_12 = (_plus_11 + ";");
            String _plus_13 = (_plus_12 + ins);
            String _plus_14 = (_plus_13 + "JMP");
            return (_plus_14 + ";");
          }
        }
      }
    }
    return null;
  }
}
