/*
 * generated by Xtext 2.25.0
 */
package diazdecerio.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JavaClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.JavaClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameIDTerminalRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Keyword cDis2022Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPublicKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cClassKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIntKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cAKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cDigitZeroKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cIntKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cBKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cEqualsSignKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cDigitZeroKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cSemicolonKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final UnorderedGroup cUnorderedGroup_17 = (UnorderedGroup)cGroup.eContents().get(17);
		private final Assignment cConstructorAssignment_17_0 = (Assignment)cUnorderedGroup_17.eContents().get(0);
		private final RuleCall cConstructorConstructorParserRuleCall_17_0_0 = (RuleCall)cConstructorAssignment_17_0.eContents().get(0);
		private final Assignment cMainAssignment_17_1 = (Assignment)cUnorderedGroup_17.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_17_1_0 = (RuleCall)cMainAssignment_17_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//JavaClass:
		//    'package' packageName=ID '.dis2022;'
		//    'public' 'class' name=ID '{'
		//        'int' 'a' '=' '0'';'
		//        'int' 'b' '=' '0'';'
		//        (constructor = Constructor & main=Main)
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' packageName=ID '.dis2022;'
		//'public' 'class' name=ID '{'
		//    'int' 'a' '=' '0'';'
		//    'int' 'b' '=' '0'';'
		//    (constructor = Constructor & main=Main)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//packageName=ID
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }
		
		//ID
		public RuleCall getPackageNameIDTerminalRuleCall_1_0() { return cPackageNameIDTerminalRuleCall_1_0; }
		
		//'.dis2022;'
		public Keyword getDis2022Keyword_2() { return cDis2022Keyword_2; }
		
		//'public'
		public Keyword getPublicKeyword_3() { return cPublicKeyword_3; }
		
		//'class'
		public Keyword getClassKeyword_4() { return cClassKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//'int'
		public Keyword getIntKeyword_7() { return cIntKeyword_7; }
		
		//'a'
		public Keyword getAKeyword_8() { return cAKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//'0'
		public Keyword getDigitZeroKeyword_10() { return cDigitZeroKeyword_10; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//'int'
		public Keyword getIntKeyword_12() { return cIntKeyword_12; }
		
		//'b'
		public Keyword getBKeyword_13() { return cBKeyword_13; }
		
		//'='
		public Keyword getEqualsSignKeyword_14() { return cEqualsSignKeyword_14; }
		
		//'0'
		public Keyword getDigitZeroKeyword_15() { return cDigitZeroKeyword_15; }
		
		//';'
		public Keyword getSemicolonKeyword_16() { return cSemicolonKeyword_16; }
		
		//(constructor = Constructor & main=Main)
		public UnorderedGroup getUnorderedGroup_17() { return cUnorderedGroup_17; }
		
		//constructor = Constructor
		public Assignment getConstructorAssignment_17_0() { return cConstructorAssignment_17_0; }
		
		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_17_0_0() { return cConstructorConstructorParserRuleCall_17_0_0; }
		
		//main=Main
		public Assignment getMainAssignment_17_1() { return cMainAssignment_17_1; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_17_1_0() { return cMainMainParserRuleCall_17_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStaticKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVoidKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cStringKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cArgsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTheTypeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cTheTypeJavaClassCrossReference_11_0 = (CrossReference)cTheTypeAssignment_11.eContents().get(0);
		private final RuleCall cTheTypeJavaClassIDTerminalRuleCall_11_0_1 = (RuleCall)cTheTypeJavaClassCrossReference_11_0.eContents().get(1);
		private final Keyword cSKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cEqualsSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cNewKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cAgainAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final CrossReference cAgainJavaClassCrossReference_15_0 = (CrossReference)cAgainAssignment_15.eContents().get(0);
		private final RuleCall cAgainJavaClassIDTerminalRuleCall_15_0_1 = (RuleCall)cAgainJavaClassCrossReference_15_0.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cSemicolonKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Main:
		//    'public' 'static' 'void' 'main' '(' 'String''['']' 'args' ')' '{'
		//        theType = [JavaClass] 's' '=' 'new' again=[JavaClass]'()'';'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'public' 'static' 'void' 'main' '(' 'String''['']' 'args' ')' '{'
		//    theType = [JavaClass] 's' '=' 'new' again=[JavaClass]'()'';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//'static'
		public Keyword getStaticKeyword_1() { return cStaticKeyword_1; }
		
		//'void'
		public Keyword getVoidKeyword_2() { return cVoidKeyword_2; }
		
		//'main'
		public Keyword getMainKeyword_3() { return cMainKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//'String'
		public Keyword getStringKeyword_5() { return cStringKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//'args'
		public Keyword getArgsKeyword_8() { return cArgsKeyword_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//theType = [JavaClass]
		public Assignment getTheTypeAssignment_11() { return cTheTypeAssignment_11; }
		
		//[JavaClass]
		public CrossReference getTheTypeJavaClassCrossReference_11_0() { return cTheTypeJavaClassCrossReference_11_0; }
		
		//ID
		public RuleCall getTheTypeJavaClassIDTerminalRuleCall_11_0_1() { return cTheTypeJavaClassIDTerminalRuleCall_11_0_1; }
		
		//'s'
		public Keyword getSKeyword_12() { return cSKeyword_12; }
		
		//'='
		public Keyword getEqualsSignKeyword_13() { return cEqualsSignKeyword_13; }
		
		//'new'
		public Keyword getNewKeyword_14() { return cNewKeyword_14; }
		
		//again=[JavaClass]
		public Assignment getAgainAssignment_15() { return cAgainAssignment_15; }
		
		//[JavaClass]
		public CrossReference getAgainJavaClassCrossReference_15_0() { return cAgainJavaClassCrossReference_15_0; }
		
		//ID
		public RuleCall getAgainJavaClassIDTerminalRuleCall_15_0_1() { return cAgainJavaClassIDTerminalRuleCall_15_0_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_16() { return cLeftParenthesisRightParenthesisKeyword_16; }
		
		//';'
		public Keyword getSemicolonKeyword_17() { return cSemicolonKeyword_17; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstructorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConstructorJavaClassCrossReference_1_0 = (CrossReference)cConstructorAssignment_1.eContents().get(0);
		private final RuleCall cConstructorJavaClassIDTerminalRuleCall_1_0_1 = (RuleCall)cConstructorJavaClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStmtsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStmtsStmtParserRuleCall_4_0 = (RuleCall)cStmtsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Constructor:
		//    'public' constructor=[JavaClass] '()' '{'
		//        stmts += Stmt+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'public' constructor=[JavaClass] '()' '{'
		//    stmts += Stmt+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//constructor=[JavaClass]
		public Assignment getConstructorAssignment_1() { return cConstructorAssignment_1; }
		
		//[JavaClass]
		public CrossReference getConstructorJavaClassCrossReference_1_0() { return cConstructorJavaClassCrossReference_1_0; }
		
		//ID
		public RuleCall getConstructorJavaClassIDTerminalRuleCall_1_0_1() { return cConstructorJavaClassIDTerminalRuleCall_1_0_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//stmts += Stmt+
		public Assignment getStmtsAssignment_4() { return cStmtsAssignment_4; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_4_0() { return cStmtsStmtParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSumStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMulStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDivStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Stmt:
		//    SumStmt|MulStmt|DivStmt|WhileStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SumStmt|MulStmt|DivStmt|WhileStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SumStmt
		public RuleCall getSumStmtParserRuleCall_0() { return cSumStmtParserRuleCall_0; }
		
		//MulStmt
		public RuleCall getMulStmtParserRuleCall_1() { return cMulStmtParserRuleCall_1; }
		
		//DivStmt
		public RuleCall getDivStmtParserRuleCall_2() { return cDivStmtParserRuleCall_2; }
		
		//WhileStmt
		public RuleCall getWhileStmtParserRuleCall_3() { return cWhileStmtParserRuleCall_3; }
	}
	public class SumStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.SumStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegRegisterEnumRuleCall_0_0 = (RuleCall)cRegAssignment_0.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SumStmt:
		//    reg = Register '+=' value = INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//reg = Register '+=' value = INT ';'
		public Group getGroup() { return cGroup; }
		
		//reg = Register
		public Assignment getRegAssignment_0() { return cRegAssignment_0; }
		
		//Register
		public RuleCall getRegRegisterEnumRuleCall_0_0() { return cRegRegisterEnumRuleCall_0_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }
		
		//value = INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MulStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.MulStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegRegisterEnumRuleCall_0_0 = (RuleCall)cRegAssignment_0.eContents().get(0);
		private final Keyword cAsteriskEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MulStmt:
		//    reg = Register '*=' value = INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//reg = Register '*=' value = INT ';'
		public Group getGroup() { return cGroup; }
		
		//reg = Register
		public Assignment getRegAssignment_0() { return cRegAssignment_0; }
		
		//Register
		public RuleCall getRegRegisterEnumRuleCall_0_0() { return cRegRegisterEnumRuleCall_0_0; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_1() { return cAsteriskEqualsSignKeyword_1; }
		
		//value = INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DivStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.DivStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegRegisterEnumRuleCall_0_0 = (RuleCall)cRegAssignment_0.eContents().get(0);
		private final Keyword cSolidusEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DivStmt:
		//    reg = Register '/='  value = INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//reg = Register '/='  value = INT ';'
		public Group getGroup() { return cGroup; }
		
		//reg = Register
		public Assignment getRegAssignment_0() { return cRegAssignment_0; }
		
		//Register
		public RuleCall getRegRegisterEnumRuleCall_0_0() { return cRegRegisterEnumRuleCall_0_0; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_1() { return cSolidusEqualsSignKeyword_1; }
		
		//value = INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class WhileStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.WhileStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStmtsWhileAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStmtsWhileStmtParserRuleCall_5_0 = (RuleCall)cStmtsWhileAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WhileStmt:
		//    'while''(' cond = Condition ')' '{'
		//        stmtsWhile += Stmt+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while''(' cond = Condition ')' '{'
		//    stmtsWhile += Stmt+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond = Condition
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_2_0() { return cCondConditionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//stmtsWhile += Stmt+
		public Assignment getStmtsWhileAssignment_5() { return cStmtsWhileAssignment_5; }
		
		//Stmt
		public RuleCall getStmtsWhileStmtParserRuleCall_5_0() { return cStmtsWhileStmtParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRegAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRegRegisterEnumRuleCall_0_0_0 = (RuleCall)cRegAssignment_0_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNumberAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNumberINTTerminalRuleCall_0_2_0 = (RuleCall)cNumberAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNumberAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNumberINTTerminalRuleCall_1_0_0 = (RuleCall)cNumberAssignment_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRegAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRegRegisterEnumRuleCall_1_2_0 = (RuleCall)cRegAssignment_1_2.eContents().get(0);
		
		//Condition:
		//    (reg=Register '!=' number=INT) | (number=INT '!=' reg=Register);
		@Override public ParserRule getRule() { return rule; }
		
		//(reg=Register '!=' number=INT) | (number=INT '!=' reg=Register)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(reg=Register '!=' number=INT)
		public Group getGroup_0() { return cGroup_0; }
		
		//reg=Register
		public Assignment getRegAssignment_0_0() { return cRegAssignment_0_0; }
		
		//Register
		public RuleCall getRegRegisterEnumRuleCall_0_0_0() { return cRegRegisterEnumRuleCall_0_0_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_0_1() { return cExclamationMarkEqualsSignKeyword_0_1; }
		
		//number=INT
		public Assignment getNumberAssignment_0_2() { return cNumberAssignment_0_2; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_2_0() { return cNumberINTTerminalRuleCall_0_2_0; }
		
		//(number=INT '!=' reg=Register)
		public Group getGroup_1() { return cGroup_1; }
		
		//number=INT
		public Assignment getNumberAssignment_1_0() { return cNumberAssignment_1_0; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0_0() { return cNumberINTTerminalRuleCall_1_0_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }
		
		//reg=Register
		public Assignment getRegAssignment_1_2() { return cRegAssignment_1_2; }
		
		//Register
		public RuleCall getRegRegisterEnumRuleCall_1_2_0() { return cRegRegisterEnumRuleCall_1_2_0; }
	}
	
	public class RegisterElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "diazdecerio.mydsl.MyDsl.Register");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRegisterAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRegisterAAKeyword_0_0 = (Keyword)cRegisterAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRegisterBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRegisterBBKeyword_1_0 = (Keyword)cRegisterBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Register:
		//    RegisterA = 'a' | RegisterB = 'b';
		public EnumRule getRule() { return rule; }
		
		//RegisterA = 'a' | RegisterB = 'b'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RegisterA = 'a'
		public EnumLiteralDeclaration getRegisterAEnumLiteralDeclaration_0() { return cRegisterAEnumLiteralDeclaration_0; }
		
		//'a'
		public Keyword getRegisterAAKeyword_0_0() { return cRegisterAAKeyword_0_0; }
		
		//RegisterB = 'b'
		public EnumLiteralDeclaration getRegisterBEnumLiteralDeclaration_1() { return cRegisterBEnumLiteralDeclaration_1; }
		
		//'b'
		public Keyword getRegisterBBKeyword_1_0() { return cRegisterBBKeyword_1_0; }
	}
	
	private final JavaClassElements pJavaClass;
	private final MainElements pMain;
	private final ConstructorElements pConstructor;
	private final StmtElements pStmt;
	private final SumStmtElements pSumStmt;
	private final MulStmtElements pMulStmt;
	private final DivStmtElements pDivStmt;
	private final WhileStmtElements pWhileStmt;
	private final ConditionElements pCondition;
	private final RegisterElements eRegister;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJavaClass = new JavaClassElements();
		this.pMain = new MainElements();
		this.pConstructor = new ConstructorElements();
		this.pStmt = new StmtElements();
		this.pSumStmt = new SumStmtElements();
		this.pMulStmt = new MulStmtElements();
		this.pDivStmt = new DivStmtElements();
		this.pWhileStmt = new WhileStmtElements();
		this.pCondition = new ConditionElements();
		this.eRegister = new RegisterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("diazdecerio.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JavaClass:
	//    'package' packageName=ID '.dis2022;'
	//    'public' 'class' name=ID '{'
	//        'int' 'a' '=' '0'';'
	//        'int' 'b' '=' '0'';'
	//        (constructor = Constructor & main=Main)
	//    '}';
	public JavaClassElements getJavaClassAccess() {
		return pJavaClass;
	}
	
	public ParserRule getJavaClassRule() {
		return getJavaClassAccess().getRule();
	}
	
	//Main:
	//    'public' 'static' 'void' 'main' '(' 'String''['']' 'args' ')' '{'
	//        theType = [JavaClass] 's' '=' 'new' again=[JavaClass]'()'';'
	//    '}';
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Constructor:
	//    'public' constructor=[JavaClass] '()' '{'
	//        stmts += Stmt+
	//    '}';
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//Stmt:
	//    SumStmt|MulStmt|DivStmt|WhileStmt;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//SumStmt:
	//    reg = Register '+=' value = INT ';';
	public SumStmtElements getSumStmtAccess() {
		return pSumStmt;
	}
	
	public ParserRule getSumStmtRule() {
		return getSumStmtAccess().getRule();
	}
	
	//MulStmt:
	//    reg = Register '*=' value = INT ';';
	public MulStmtElements getMulStmtAccess() {
		return pMulStmt;
	}
	
	public ParserRule getMulStmtRule() {
		return getMulStmtAccess().getRule();
	}
	
	//DivStmt:
	//    reg = Register '/='  value = INT ';';
	public DivStmtElements getDivStmtAccess() {
		return pDivStmt;
	}
	
	public ParserRule getDivStmtRule() {
		return getDivStmtAccess().getRule();
	}
	
	//WhileStmt:
	//    'while''(' cond = Condition ')' '{'
	//        stmtsWhile += Stmt+
	//    '}';
	public WhileStmtElements getWhileStmtAccess() {
		return pWhileStmt;
	}
	
	public ParserRule getWhileStmtRule() {
		return getWhileStmtAccess().getRule();
	}
	
	//Condition:
	//    (reg=Register '!=' number=INT) | (number=INT '!=' reg=Register);
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//enum Register:
	//    RegisterA = 'a' | RegisterB = 'b';
	public RegisterElements getRegisterAccess() {
		return eRegister;
	}
	
	public EnumRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
