/*
 * generated by Xtext 2.25.0
 */
package diazdecerio.mydsl.serializer;

import com.google.inject.Inject;
import diazdecerio.mydsl.myDsl.Condition;
import diazdecerio.mydsl.myDsl.Constructor;
import diazdecerio.mydsl.myDsl.DivStmt;
import diazdecerio.mydsl.myDsl.JavaClass;
import diazdecerio.mydsl.myDsl.Main;
import diazdecerio.mydsl.myDsl.MulStmt;
import diazdecerio.mydsl.myDsl.MyDslPackage;
import diazdecerio.mydsl.myDsl.SumStmt;
import diazdecerio.mydsl.myDsl.WhileStmt;
import diazdecerio.mydsl.services.MyDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case MyDslPackage.CONSTRUCTOR:
				sequence_Constructor(context, (Constructor) semanticObject); 
				return; 
			case MyDslPackage.DIV_STMT:
				sequence_DivStmt(context, (DivStmt) semanticObject); 
				return; 
			case MyDslPackage.JAVA_CLASS:
				sequence_JavaClass(context, (JavaClass) semanticObject); 
				return; 
			case MyDslPackage.MAIN:
				sequence_Main(context, (Main) semanticObject); 
				return; 
			case MyDslPackage.MUL_STMT:
				sequence_MulStmt(context, (MulStmt) semanticObject); 
				return; 
			case MyDslPackage.SUM_STMT:
				sequence_SumStmt(context, (SumStmt) semanticObject); 
				return; 
			case MyDslPackage.WHILE_STMT:
				sequence_WhileStmt(context, (WhileStmt) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     ((reg=Register number=INT) | (number=INT reg=Register))
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constructor returns Constructor
	 *
	 * Constraint:
	 *     (constructor=[JavaClass|ID] stmts+=Stmt+)
	 */
	protected void sequence_Constructor(ISerializationContext context, Constructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns DivStmt
	 *     DivStmt returns DivStmt
	 *
	 * Constraint:
	 *     (reg=Register value=INT)
	 */
	protected void sequence_DivStmt(ISerializationContext context, DivStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DIV_STMT__REG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DIV_STMT__REG));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DIV_STMT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DIV_STMT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivStmtAccess().getRegRegisterEnumRuleCall_0_0(), semanticObject.getReg());
		feeder.accept(grammarAccess.getDivStmtAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JavaClass returns JavaClass
	 *
	 * Constraint:
	 *     (packageName=ID name=ID (constructor=Constructor | main=Main)+)
	 */
	protected void sequence_JavaClass(ISerializationContext context, JavaClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Main returns Main
	 *
	 * Constraint:
	 *     (theType=[JavaClass|ID] again=[JavaClass|ID])
	 */
	protected void sequence_Main(ISerializationContext context, Main semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MAIN__THE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MAIN__THE_TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MAIN__AGAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MAIN__AGAIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMainAccess().getTheTypeJavaClassIDTerminalRuleCall_11_0_1(), semanticObject.eGet(MyDslPackage.Literals.MAIN__THE_TYPE, false));
		feeder.accept(grammarAccess.getMainAccess().getAgainJavaClassIDTerminalRuleCall_15_0_1(), semanticObject.eGet(MyDslPackage.Literals.MAIN__AGAIN, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns MulStmt
	 *     MulStmt returns MulStmt
	 *
	 * Constraint:
	 *     (reg=Register value=INT)
	 */
	protected void sequence_MulStmt(ISerializationContext context, MulStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MUL_STMT__REG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MUL_STMT__REG));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MUL_STMT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MUL_STMT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMulStmtAccess().getRegRegisterEnumRuleCall_0_0(), semanticObject.getReg());
		feeder.accept(grammarAccess.getMulStmtAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns SumStmt
	 *     SumStmt returns SumStmt
	 *
	 * Constraint:
	 *     (reg=Register value=INT)
	 */
	protected void sequence_SumStmt(ISerializationContext context, SumStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SUM_STMT__REG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SUM_STMT__REG));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SUM_STMT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SUM_STMT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSumStmtAccess().getRegRegisterEnumRuleCall_0_0(), semanticObject.getReg());
		feeder.accept(grammarAccess.getSumStmtAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns WhileStmt
	 *     WhileStmt returns WhileStmt
	 *
	 * Constraint:
	 *     (cond=Condition stmtsWhile+=Stmt+)
	 */
	protected void sequence_WhileStmt(ISerializationContext context, WhileStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
