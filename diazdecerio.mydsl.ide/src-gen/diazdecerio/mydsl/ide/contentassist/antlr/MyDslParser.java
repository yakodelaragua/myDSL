/*
 * generated by Xtext 2.25.0
 */
package diazdecerio.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import diazdecerio.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import diazdecerio.mydsl.services.MyDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStmtAccess().getAlternatives(), "rule__Stmt__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getRegisterAccess().getAlternatives(), "rule__Register__Alternatives");
			builder.put(grammarAccess.getJavaClassAccess().getGroup(), "rule__JavaClass__Group__0");
			builder.put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
			builder.put(grammarAccess.getConstructorAccess().getGroup(), "rule__Constructor__Group__0");
			builder.put(grammarAccess.getSumStmtAccess().getGroup(), "rule__SumStmt__Group__0");
			builder.put(grammarAccess.getMulStmtAccess().getGroup(), "rule__MulStmt__Group__0");
			builder.put(grammarAccess.getDivStmtAccess().getGroup(), "rule__DivStmt__Group__0");
			builder.put(grammarAccess.getWhileStmtAccess().getGroup(), "rule__WhileStmt__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_0(), "rule__Condition__Group_0__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
			builder.put(grammarAccess.getJavaClassAccess().getPackageNameAssignment_1(), "rule__JavaClass__PackageNameAssignment_1");
			builder.put(grammarAccess.getJavaClassAccess().getNameAssignment_5(), "rule__JavaClass__NameAssignment_5");
			builder.put(grammarAccess.getJavaClassAccess().getConstructorAssignment_17_0(), "rule__JavaClass__ConstructorAssignment_17_0");
			builder.put(grammarAccess.getJavaClassAccess().getMainAssignment_17_1(), "rule__JavaClass__MainAssignment_17_1");
			builder.put(grammarAccess.getMainAccess().getTheTypeAssignment_11(), "rule__Main__TheTypeAssignment_11");
			builder.put(grammarAccess.getMainAccess().getAgainAssignment_15(), "rule__Main__AgainAssignment_15");
			builder.put(grammarAccess.getConstructorAccess().getConstructorAssignment_1(), "rule__Constructor__ConstructorAssignment_1");
			builder.put(grammarAccess.getConstructorAccess().getStmtsAssignment_4(), "rule__Constructor__StmtsAssignment_4");
			builder.put(grammarAccess.getSumStmtAccess().getRegAssignment_0(), "rule__SumStmt__RegAssignment_0");
			builder.put(grammarAccess.getSumStmtAccess().getValueAssignment_2(), "rule__SumStmt__ValueAssignment_2");
			builder.put(grammarAccess.getMulStmtAccess().getRegAssignment_0(), "rule__MulStmt__RegAssignment_0");
			builder.put(grammarAccess.getMulStmtAccess().getValueAssignment_2(), "rule__MulStmt__ValueAssignment_2");
			builder.put(grammarAccess.getDivStmtAccess().getRegAssignment_0(), "rule__DivStmt__RegAssignment_0");
			builder.put(grammarAccess.getDivStmtAccess().getValueAssignment_2(), "rule__DivStmt__ValueAssignment_2");
			builder.put(grammarAccess.getWhileStmtAccess().getCondAssignment_2(), "rule__WhileStmt__CondAssignment_2");
			builder.put(grammarAccess.getWhileStmtAccess().getStmtsWhileAssignment_5(), "rule__WhileStmt__StmtsWhileAssignment_5");
			builder.put(grammarAccess.getConditionAccess().getRegAssignment_0_0(), "rule__Condition__RegAssignment_0_0");
			builder.put(grammarAccess.getConditionAccess().getNumberAssignment_0_2(), "rule__Condition__NumberAssignment_0_2");
			builder.put(grammarAccess.getConditionAccess().getNumberAssignment_1_0(), "rule__Condition__NumberAssignment_1_0");
			builder.put(grammarAccess.getConditionAccess().getRegAssignment_1_2(), "rule__Condition__RegAssignment_1_2");
			builder.put(grammarAccess.getJavaClassAccess().getUnorderedGroup_17(), "rule__JavaClass__UnorderedGroup_17");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
